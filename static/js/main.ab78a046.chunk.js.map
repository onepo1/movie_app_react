{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenres","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","_ref2","src","_ref3","propsTypes","string","isRequired","array","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2VAkDA,SAASA,EAATC,GAAiD,IAAjCC,EAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,OAAQC,EAAkBH,EAAlBG,OAAQC,EAAUJ,EAAVI,SACnC,OAGIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAASA,EAAQQ,IAAKT,KAEvCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAETL,EAAOQ,IAAI,SAACC,EAAOC,GAAR,OAAkBR,EAAAC,EAAAC,cAACO,EAAD,CAAaF,MAAOA,EAAOG,IAAKF,OAEnER,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBACTH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACIW,KAAMb,EACNc,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eAQhC,SAASZ,EAATa,GAAkC,IAAZpB,EAAYoB,EAAZpB,OAAOQ,EAAKY,EAALZ,IACzB,OACIL,EAAAC,EAAAC,cAAA,OAAKgB,IAAMrB,EAAQQ,IAAKA,EAAKT,MAAOS,EAAKF,UAAU,iBAG3D,SAASM,EAATU,GAA6B,IAAPZ,EAAOY,EAAPZ,MAClB,OACIP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeI,EAA/B,KAGRb,EAAM0B,WAAa,CACfxB,MAAOwB,IAAWC,OAAOC,WACzBzB,OAAOuB,IAAWC,OAAOC,WACzBxB,OAAOsB,IAAWG,MAAMD,WACxBvB,SAASqB,IAAWC,OAAOC,YAE/BlB,EAAYgB,WAAa,CACrBvB,OAAQuB,IAAWC,OAAOC,WAC1BjB,IAAKe,IAAWC,OAAOC,YAE3Bb,EAAYW,WAAa,CACrBb,MAAOa,IAAWC,OAAOC,YAGd5B,QCmKA8B,6MA5EbC,MAAQ,KAORC,cAAgB,WAmBd,OAlBeC,EAAKF,MAAMG,OAAOtB,IAAI,SAACuB,GAUpC,OAAM7B,EAAAC,EAAAC,cAAC4B,EAAD,CACJlC,MAAOiC,EAAME,cACblC,OAAQgC,EAAMG,mBACdtB,IAAKmB,EAAMI,GACXnC,OAAQ+B,EAAM/B,OACdC,SAAW8B,EAAM9B,gBAOvBmC,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAKUb,EAAKc,WALf,OAKLb,EALKU,EAAAI,KAOXf,EAAKgB,SAAS,CAEZf,WATS,wBAAAU,EAAAM,SAAAT,EAAAU,WAcbJ,SAAW,WAEL,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAK1BF,KAAK,SAAAE,GAAI,OAAEA,EAAKC,KAAKtB,SACrBuB,MAAM,SAAAC,GAAG,OAAGC,QAAQC,IAAIF,yFAjD7BP,KAAKX,8CAwDC,IAQGN,EAAUiB,KAAKpB,MAAfG,OACP,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAWyB,EAAS,MAAQ,gBAC9BiB,KAAKpB,MAAMG,OAASiB,KAAKnB,gBAAkB,kBAxEtC6B,aChLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.ab78a046.chunk.js","sourcesContent":["import React from 'react';\r\nimport propsTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\n// class Movie extends Component{\r\n//     static propsTypes = {\r\n//         title: propsTypes.string.isRequired,\r\n//         poster: propsTypes.string.isRequired\r\n//     }\r\n// // 1.\r\n//     componentWillMount(){\r\n//         console.log('will mount');\r\n//     }\r\n// // 4.\r\n//     componentDidMount(){\r\n//         console.log('did mount');\r\n//     } \r\n\r\n// // 2.\r\n//     render(){\r\n//         console.log('did render');\r\n//         // 부모가 자식에게 속성을 알려주는 것 title을 props로 불러오는 것.왜냐하면 movie 컴포넌트는 title이라는 요소가 있으니까\r\n//         // console.log(this.props);\r\n//         return (//헬로 이건 영화임\r\n//             <div>\r\n//                 <MoviePoster poster ={this.props.poster}/>\r\n//                <h1>{this.props.title}</h1>\r\n//             </div>\r\n            \r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n// class MoviePoster extends Component{\r\n//     static propsTypes = {\r\n//         title: propsTypes.string.isRequired,//isRequired필수 요건이라고 하고  데이터가 없을 경우 메시지를 받을 수 있다.\r\n//         poster: propsTypes.string.isRequired\r\n//     }\r\n//     // 3.\r\n//     render(){\r\n//         console.log(this.props);\r\n//         return(\r\n//             <img src ={this.props.poster} alt=\"Poster\"/>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// 4.stateless function -->dump component\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        // props 추가2\r\n        // 베이직 html 작업 className추가 JSX\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Columns\">\r\n                <MoviePoster poster ={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie_Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Genres\">\r\n                {/* 쟝르를 맵핑할때 movie genre라는 새로운 컴포넌트 만듬 */}\r\n                     {genres.map((genre, index) => <MovieGenres genre={genre} key={index} />)}\r\n                </div>\r\n                <p className=\"Movie_Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster,alt}){\r\n    return(\r\n        <img src ={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n    )\r\n}\r\nfunction MovieGenres({genre}){\r\n    return(\r\n        <span className=\"Movie_Genre\">{genre} </span>\r\n    )\r\n}\r\nMovie.propsTypes = {\r\n    title: propsTypes.string.isRequired,\r\n    poster:propsTypes.string.isRequired,\r\n    genres:propsTypes.array.isRequired,\r\n    synopsis:propsTypes.string.isRequired\r\n}\r\nMoviePoster.propsTypes = {\r\n    poster: propsTypes.string.isRequired,\r\n    alt: propsTypes.string.isRequired\r\n}\r\nMovieGenres.propsTypes = {\r\n    genre: propsTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n\n//1.단계\n// const movieTitles = [\n//   \"Matrix\",\n//   \"Full Metal Jacket\",\n//   \"Oldboy\",\n//   \"Star Wars\"\n// ]\n\n\n// const movieImages =[\n//   \"https://images-na.ssl-images-amazon.com/images/I/51EG732BV3L.jpg\",\n//   \"https://cdn1.thr.com/sites/default/files/imagecache/landscape_928x523/2017/05/full_metal_jacket_1987_3-h_2017.jpg\",\n//   \"https://upload.wikimedia.org/wikipedia/en/thumb/b/bb/Oldboy_2013_film_poster.jpg/220px-Oldboy_2013_film_poster.jpg\",\n//   \"https://m.media-amazon.com/images/M/MV5BNzVlY2MwMjktM2E4OS00Y2Y3LWE3ZjctYzhkZGM3YzA1ZWM2XkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_.jpg\"\n// ]\n\n// 2.단계 - 엄청난 양의 정보를 불러오고싶을땐 array-->그 다음엔 map\n// const movies =[\n//   {\n//     // id: 1,\n//     title: \"Matrix\",\n//     poster: \"https://images-na.ssl-images-amazon.com/images/I/51EG732BV3L.jpg\"\n//   },\n//   {\n//     // id: 2,\n//     title: \"Full Metal Jacket\",\n//     poster: \"https://cdn1.thr.com/sites/default/files/imagecache/landscape_928x523/2017/05/full_metal_jacket_1987_3-h_2017.jpg\"\n//   },\n//   {\n//     // id: 3,\n//     title: \"Oldboy\",\n//     poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/b/bb/Oldboy_2013_film_poster.jpg/220px-Oldboy_2013_film_poster.jpg\"\n//   },\n//   {\n//     // id: 4,\n//     title: \"Star Wars\",\n//     poster: \"https://m.media-amazon.com/images/M/MV5BNzVlY2MwMjktM2E4OS00Y2Y3LWE3ZjctYzhkZGM3YzA1ZWM2XkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_.jpg\"\n//   }\n// ]\n\n// // 3단계 state 사용\n// class App extends Component {\n//   // 싸이클\n//   // Render: componentWillMount() --> render() --> componentDidMount()\n//   // Update: componentWillReceiveProps() --> shouldComponentUpdate() --> componentWillUpdate() --> render() --> componentDidUpdate()\n//   // 이 컴포넌트가 나에게 보여주는 것이 무엇인가? 이게 render 기능\n\n//   // State\n//   state = {\n//     greeting:\"Hi\",\n\n    \n//     // movies:[\n//     //   {\n//     //     // id: 1,\n//     //     title: \"Matrix\",\n//     //     poster: \"https://images-na.ssl-images-amazon.com/images/I/51EG732BV3L.jpg\"\n//     //   },\n//     //   {\n//     //     // id: 2,\n//     //     title: \"Full Metal Jacket\",\n//     //     poster: \"https://cdn1.thr.com/sites/default/files/imagecache/landscape_928x523/2017/05/full_metal_jacket_1987_3-h_2017.jpg\"\n//     //   },\n//     //   {\n//     //     // id: 3,\n//     //     title: \"Oldboy\",\n//     //     poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/b/bb/Oldboy_2013_film_poster.jpg/220px-Oldboy_2013_film_poster.jpg\"\n//     //   },\n//     //   {\n//     //     // id: 4,\n//     //     title: \"Star Wars\",\n//     //     poster: \"https://starwarsblog.starwars.com/wp-content/uploads/2018/05/star-wars-movie-posters.jpg\"\n//     //   },\n//     //   {     \n//     //     title: 'transportting',\n//     //     poster:\"http://pbs.twimg.com/media/CQExsCKWcAA7GhZ.png\"\n//     //   }\n//     // ]\n//   }\n\n//   // 컴포넌트가 mount되면 5초 기다리고 ,greeting을 업데이트\n//   componentDidMount(){\n//     // 1. 5초뒤에 글이 title 추가\n//     // setTimeout(()=>{\n//     //   this.setState({\n//     //     greeting :\"Hi again!\" \n//     //   })\n//     // }, 5000);\n\n//     // 2. 3초뒤에 리스트 하나더 추가\n//     // setTimeout(()=>{\n//     //   // console.log('hello');\n//     //   this.setState({\n//     //     movies:[ \n//     //       ...this.state.movies,\n//     //       {     \n//     //         title: 'transportting',\n//     //         poster:\"http://pbs.twimg.com/media/CQExsCKWcAA7GhZ.png\"\n//     //       }\n//     //     ]\n//     //   })\n//     // },3000);\n\n//     // 3.\n//     setTimeout(()=>{\n//       this.setState({\n\n//         movies:[\n//           {\n//             // id: 1,\n//             title: \"Matrix\",\n//             poster: \"https://images-na.ssl-images-amazon.com/images/I/51EG732BV3L.jpg\"\n//           },\n//           {\n//             // id: 2,\n//             title: \"Full Metal Jacket\",\n//             poster: \"https://cdn1.thr.com/sites/default/files/imagecache/landscape_928x523/2017/05/full_metal_jacket_1987_3-h_2017.jpg\"\n//           },\n//           {\n//             // id: 3,\n//             title: \"Oldboy\",\n//             poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/b/bb/Oldboy_2013_film_poster.jpg/220px-Oldboy_2013_film_poster.jpg\"\n//           },\n//           {\n//             // id: 4,\n//             title: \"Star Wars\",\n//             poster: \"https://starwarsblog.starwars.com/wp-content/uploads/2018/05/star-wars-movie-posters.jpg\"\n//           },\n//           {     \n//             title: 'transportting',\n//             poster:\"http://pbs.twimg.com/media/CQExsCKWcAA7GhZ.png\"\n//           }\n//         ]\n//       })\n//     },3000);\n//   }\n\n//   _renderMovies = () =>{\n//     const movies = this.state.movies.map((movie, index) => {\n//       return <Movie title={movie.title} poster={movie.poster} key={index} />\n//     })\n//     return movies;\n//   }\n//   render() {//모든 컴포넌트는 render() 가지고 있다->뭔가를 보여주는, 출력하는\n//     return (\n//       <div className=\"App\">\n//         {this.state.greeting}\n//         {/*       1단계 결과\n//         <Movie title={movieTitles[0]} poster={movieImages[0]}/>\n//         <Movie title={movieTitles[1]} poster={movieImages[1]}/>\n//         <Movie title={movieTitles[2]} poster={movieImages[2]}/>\n//         <Movie title={movieTitles[3]} poster={movieImages[3]}/> */}\n\n//         {/* 2단계결과\n//         {movies.map((movie, index) => {\n//           return <Movie title={movie.title} poster={movie.poster} key={index} />\n//         })} */}\n//         {/* \n//         위의 결과는\n//         {[\n//           <Movie title={movies[0].title} poster={movies[0].poster} />\n//           <Movie title={movies[1].title} poster={movies[1].poster} />\n//           <Movie title={movies[2].title} poster={movies[2].poster} />\n//           <Movie title={movies[3].title} poster={movies[3].poster} />\n//         ]}\n//         이다\n        \n//         */}\n       \n//         {/* {this.state.movies.map((movie, index) => {\n//           return <Movie title={movie.title} poster={movie.poster} key={index} />\n//         })} */}\n\n\n//         {/* 3단계 */}\n//         {this.state.movies ? this._renderMovies() : 'Loading'}\n//       </div>\n//     );\n//   }\n// }\n\n// 4.AJAX\n// then(function)은 1개의 attribute만 준다.-fetch의 결과물. 오브젝트\nclass App extends Component {\n  state = {}\n\n// 2.get movies라는 function 사용\n  componentDidMount(){\n    this._getMovies();\n  }\n// 7.const movies는 맵핑을 한다. 영화타이틀, 포스터(large_cover_image순으로)\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie)=>{\n      // index를 사용하면 느리므로 movie에 있는 id를 넣는것이 맞다.\n      // const movies = this.state.movies.map((movie, index)=>{\n      // console.log(movie);\n      // 만든 object\n      // return<Movie title={movie.title} poster={movie.poster} key={index} />\n\n      // api에서 가져온 json의 key\n\n      // props 추가1\n      return<Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis ={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n// 3. get movies asymchronous function이다.\n  _getMovies = async () => {\n    // return value\n    // call api 작업완료하고 return하기를 await했다.\n    //  그래서 json.data.movies의 value는 , const movies의 결과값이다.\n    // async안쓰면 await은 있어도 작동을 안한다.\n    const movies = await this._callApi();\n//  5. 그리고 나의 component의 state를 movies로 set한거다.\n    this.setState({\n      // movies:movies의 모던 자바스크립트\n      movies\n    })\n  }\n\n//1. fetch를 call api로 변경 \n  _callApi = () => {\n        // console.log(fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating'));\n        return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n        .then(response => response.json())\n        // .then(json=>console.log(json))\n        // =>함수는 reture이 포함되어 있다.\n// 4.call api는 fetch promise를 return 할 것인데 이는 모든 데이터의 JSON이다.\n//  그래서 json.data.movies의 value는 , const movies의 결과값이다.\n        .then(json=>json.data.movies)\n        .catch(err =>console.log(err))\n    \n        // .catch(function(){\n        //   console.log(err)\n        // });\n        \n  }\n  render(){\n//     return(\n//       <div className=\"APP\">\n// {/* 6. state안에 movies가 있으면 render movies라는 function을 불러올거야 */}\n//         {this.state.movies ? this._renderMovies() : 'Loading'}\n//       </div>\n//     );\n\n      const {movies} = this.state;\n      return(\n          <div className={movies ? \"App\" : \"App--loading\"}>\n            {this.state.movies ? this._renderMovies() : 'Loading'}\n          </div>\n      );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));// ReactDOM이 출력한다 무엇을? App을 (App.js에 있는 전체내용)index.html의 아이디 root안에 넣는다.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}